{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport cookie from 'js-cookie';\nimport Router from 'next/router'; // set in cookie\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; // remove from cookie\n\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key);\n  }\n}; // get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\n\nexport const getCookie = (key, req) => {\n  // if (process.browser) {\n  //     return cookie.get(key);\n  // }\n  return false ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\nexport const getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\nexport const getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  } // console.log('req.headers.cookie', req.headers.cookie);\n\n\n  let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n\n  if (!token) {\n    return undefined;\n  }\n\n  let tokenValue = token.split('=')[1]; // console.log('getCookieFromServer', tokenValue);\n\n  return tokenValue;\n}; // set in localstoarge\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, _JSON$stringify(value));\n  }\n}; // remove from localstorage\n\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage during signin\n\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; // access user info from localstorage\n\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const logout = () => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  Router.push('/login');\n};\nexport const updateUser = (user, next) => {\n  if (false) {\n    if (localStorage.getItem('user')) {\n      let auth = JSON.parse(localStorage.getItem('user'));\n      auth = user;\n      localStorage.setItem('user', _JSON$stringify(auth));\n      next();\n    }\n  }\n};","map":{"version":3,"sources":["A:/VS Code/academicEarth/client/helpers/auth.js"],"names":["cookie","Router","setCookie","key","value","set","expires","removeCookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","headers","undefined","token","split","find","c","trim","startsWith","tokenValue","setLocalStorage","localStorage","setItem","removeLocalStorage","removeItem","authenticate","response","next","data","user","isAuth","cookieChecked","getItem","JSON","parse","logout","push","updateUser","auth"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\nimport Router from 'next/router';\n\n// set in cookie\nexport const setCookie = (key, value) => {\n    if (process.browser) {\n        cookie.set(key, value, {\n            expires: 1\n        });\n    }\n};\n\n// remove from cookie\nexport const removeCookie = key => {\n    if (process.browser) {\n        cookie.remove(key);\n    }\n};\n\n// get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\nexport const getCookie = (key, req) => {\n    // if (process.browser) {\n    //     return cookie.get(key);\n    // }\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nexport const getCookieFromBrowser = key => {\n    return cookie.get(key);\n};\n\nexport const getCookieFromServer = (key, req) => {\n    if (!req.headers.cookie) {\n        return undefined;\n    }\n    // console.log('req.headers.cookie', req.headers.cookie);\n    let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\n    if (!token) {\n        return undefined;\n    }\n    let tokenValue = token.split('=')[1];\n    // console.log('getCookieFromServer', tokenValue);\n    return tokenValue;\n};\n\n// set in localstoarge\nexport const setLocalStorage = (key, value) => {\n    if (process.browser) {\n        localStorage.setItem(key, JSON.stringify(value));\n    }\n};\n\n// remove from localstorage\nexport const removeLocalStorage = key => {\n    if (process.browser) {\n        localStorage.removeItem(key);\n    }\n};\n\n// authenticate user by passing data to cookie and localstorage during signin\nexport const authenticate = (response, next) => {\n    setCookie('token', response.data.token);\n    setLocalStorage('user', response.data.user);\n    next();\n};\n\n// access user info from localstorage\nexport const isAuth = () => {\n    if (process.browser) {\n        const cookieChecked = getCookie('token');\n        if (cookieChecked) {\n            if (localStorage.getItem('user')) {\n                return JSON.parse(localStorage.getItem('user'));\n            } else {\n                return false;\n            }\n        }\n    }\n};\n\nexport const logout = () => {\n    removeCookie('token');\n    removeLocalStorage('user');\n    Router.push('/login');\n};\n\nexport const updateUser = (user, next) => {\n    if (process.browser) {\n        if (localStorage.getItem('user')) {\n            let auth = JSON.parse(localStorage.getItem('user'));\n            auth = user;\n            localStorage.setItem('user', JSON.stringify(auth));\n            next();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}